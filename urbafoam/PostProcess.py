import json
import os
import sys

import numpy as np


def get_latest_time(times):
    time_numbers = [float(t) for t in times]
    max_index = time_numbers.index(max(time_numbers))
    return times[max_index]


def load_sample_points(case_dir, sample_name, field):
    sample_dir = case_dir / "postProcessing" / "sampleDict"
    sample_times = [s for s in os.listdir(sample_dir) if s.isdigit()]
    if len(sample_times) == 0:
        print(f"no sample points found in {sample_dir}. Has the simulation run to completion?")
    max_time = get_latest_time(sample_times)
    sample_file = sample_dir / max_time / f"{sample_name}_{field}.xy"
    sample_points = np.loadtxt(sample_file, delimiter='\t')
    return sample_points


def orient_sample_date(case_dir, sample_name, field='U',remove_zeros=False):
    if not (case_dir / 'rotation_matrix.json').is_file():
        print("could not find 'rotation_matrix.json', was this case generated by Urbafoam?")
        sys.exit(1)

    with open(case_dir / 'rotation_matrix.json') as src:
        rotation_data = json.load(src)
    rotation_matrix = np.array(rotation_data['rot_matrix'])
    rotation_matrix = np.linalg.inv(rotation_matrix)  # rotating back to start_postion
    centerpoint = np.array(rotation_data['centerpoint'])

    sample_data = load_sample_points(case_dir, sample_name, field)
    if sample_data.shape[1] == 6:  # vector data
        start_points = sample_data[:, :3]
        data = sample_data[:, 3:]  # vector
        vector_mag = np.linalg.norm(data, axis=1).reshape((-1, 1))
        end_points = start_points + data
        start_points = (start_points - centerpoint).dot(rotation_matrix) + centerpoint
        end_points = (end_points - centerpoint).dot(rotation_matrix) + centerpoint
        return np.concatenate((start_points, end_points, vector_mag), axis=1)
    else:  # scalar data
        start_points = sample_data[:, :3]
        data_points = sample_data[:, 3:]
        start_points = (start_points + centerpoint).dot(rotation_matrix) - centerpoint
        return np.concatenate((start_points, data_points), axis=1)

def write_oriented_data(case_dir,sample_name,field='U', remove_zeros=False):
    data = orient_sample_date(case_dir,sample_name,field,remove_zeros)
    filename = f"{sample_name}_{field}.xyz"
    np.savetxt(case_dir / filename,data)


